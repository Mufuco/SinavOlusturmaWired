// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectTek.DataAccesLayer.Contexts;

#nullable disable

namespace ProjectTek.DataAccesLayer.Migrations
{
    [DbContext(typeof(ProjectTekDbContext))]
    partial class ProjectTekDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectTek.EntityLayer.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExamQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExamQuestionId");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("ProjectTek.EntityLayer.Entities.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WiredArticleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WiredArticleId");

                    b.ToTable("exams");
                });

            modelBuilder.Entity("ProjectTek.EntityLayer.Entities.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("examQuestions");
                });

            modelBuilder.Entity("ProjectTek.EntityLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ProjectTek.EntityLayer.Entities.WiredArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("wiredArticles");
                });

            modelBuilder.Entity("ProjectTek.EntityLayer.Entities.Answer", b =>
                {
                    b.HasOne("ProjectTek.EntityLayer.Entities.ExamQuestion", "examQuestion")
                        .WithMany("answers")
                        .HasForeignKey("ExamQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("examQuestion");
                });

            modelBuilder.Entity("ProjectTek.EntityLayer.Entities.Exam", b =>
                {
                    b.HasOne("ProjectTek.EntityLayer.Entities.WiredArticle", "Article")
                        .WithMany("exams")
                        .HasForeignKey("WiredArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("ProjectTek.EntityLayer.Entities.ExamQuestion", b =>
                {
                    b.HasOne("ProjectTek.EntityLayer.Entities.Exam", "exam")
                        .WithMany("examQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("exam");
                });

            modelBuilder.Entity("ProjectTek.EntityLayer.Entities.Exam", b =>
                {
                    b.Navigation("examQuestions");
                });

            modelBuilder.Entity("ProjectTek.EntityLayer.Entities.ExamQuestion", b =>
                {
                    b.Navigation("answers");
                });

            modelBuilder.Entity("ProjectTek.EntityLayer.Entities.WiredArticle", b =>
                {
                    b.Navigation("exams");
                });
#pragma warning restore 612, 618
        }
    }
}
